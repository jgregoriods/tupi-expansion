install.packages("sf")
install.packages("units")
install.packages("units")
install.packages("sf")
install.packages("rnaturalearthdata")
library(raster)
a <- raster("~/euro_test.tif")
plot(a)
a
plot(a)
dev.off()
clear
clear()
cl()
gc()
plot(a)
sp0 <- SpatialPoints(cbind(30,40))
plot(sp0, add=T)
is.projected(sp0)
proj4str+
proj4string(sp0) <- CRS("+init=epsg:4326")
is.projected(sp0)
(i in sp0)
for (i in sp0) {}
sp0[1]
install.packages("gdistance")
library(gdistance)
origin <- sp0
tr <- transition(a, function(x) 1/mean(x), 8)
tr <- geoCorrection(tr)
ac <- accCost(tr, origin)
plot(ac)
plot(ac/1000)
plot(ac/1000/1.78)
plot(5000 - (ac/1000/1.78))
library(raster)
r <- raster("~/expand_tupi/layers/ele.asc")
plot(r)
dev.off()
plot(r)
sp0 <- SpatialPoints(cbind(0,4000))
plot(sp0, add=T)
r
sp0 <- SpatialPoints(cbind(0,4000000))
plot(r)
plot(sp0, add=T)
extract(r, sp0)
library(rgeos)
gb <- gBuffer(so0, width=150000)
gb <- gBuffer(sp0, width=150000)
plot(gb, add=T)
gb <- gBuffer(sp0, width=200000)
plot(gb, add=T)
plot(sp0, add=T)
dev.off()
plot(r)
sps <- spsample(r, 1000, type=random)
sps <- spsample(extent(r), 1000, type=random)
sps <- spsample(as.polygon(extent(r)), 1000, type=random)
sps <- spsample(as(extent(r), "SpatialPolygons"), 1000, type=random)
sps <- spsample(as(extent(r), "SpatialPolygons"), 1000, type="random")
plot(sps, add=T)
sps <- spsample(as(extent(r), "SpatialPolygons"), 1000, type="regular")
plot(sps, add=T)
filterPoints <- function(pts, radius, attr) {
x <- c(colnames(coordinates(pts)))[1]
y <- c(colnames(coordinates(pts)))[2]
clusters <- zerodist(pts, zero = radius, unique.ID = TRUE)
pts$clusterID <- clusters
pts.df <- as.data.frame(pts)
pts.max <- as.data.frame(pts.df %>% group_by(clusterID) %>% top_n(1, attr))
res <- SpatialPoints(cbind(pts.max[[x]], pts.max[[y]]))
proj4string(res) <- proj4string(pts)
return(res)
}
dev.off()
plot(r)
plot(sps, add=T)
sps$attr <- extract(r, sps)
dev.off()
spplot(sps, "attr")
x <- filterPoints(sps, 150, attr)
library(dplyr)
x <- filterPoints(sps, 150, attr)
dev.off()
plot(x)
x <- filterPoints(sps, 150000, attr)
plot(x)
proj4string(sps)
dev.off()
r <- raster("~/GIS/sam_test.tif")
plot(r)
sps <- spsample(r, 1000, "regular")
sps <- spsample(as(extent(r), "SpatialPolygons"), 1000, "regular")
plot(sps, add=T)
sps$attr <- extract(r, sps)
proj4string(sps) <- proj4string(r)
x <- filterPoints(sps, 150, attr)
plot(r)
plot(x, add=T)
plot(r)
x <- filterPoints(sps, 500, attr)
plot(x, add=T)
s
x
x$attr <- extract(x, r)
x$attr <- extract(r, x)
x <- filterPoints(x, 500, attr)
plot(x, add=T, color="blue")
plot(r)
plot(x, add=T, color="blue")
x <- filterPoints(x, 500, attr)
x$attr <- extract(r, x)
dev.off()
x <- filterPoints(x, 500, attr)
plot(r)
plot(x, add=T)
source("dispeRse.R")
a
r
b <- r
b[values(b) > 0] <- 1
plot(b)
orig <- c(-60,-10)
simulateDispersal(b, orig, 5000, 1.3)
b[!is.na(values(b))] <- 0
b[!is.na(values(b))] <- 1
plot(b)
simulateDispersal(b, orig, 5000, 1.3)
source("dispeRse.R")
iso <- simulateDispersal(b, orig, 5000, 1.3)
plot(iso, col=viridis(10))
library(viridisLite)
plot(iso, col=viridis(10))
source("dispeRse.R")
iso <- simulateDispersal(b, orig, 5000, 1.3)
plot(iso, col=viridis(10))
plot(iso, col=viridis(20))
vt <- raster("~/veg_test.tif")
plot(vt)
vt[values(vt) > 1] <- 10
plot(vt)
vt
plot(orig, add=T)
iso <- simulateDispersal(vt, orig, 5000, 1.3)
warnings()
plot(iso)
iso[values(iso)<=0] <- 0
plot(iso)
plot(iso, col=viridis(10))
source("dispeRse.R")
iso <- simulateDispersal(vt, orig, 5000, 1.3)
plot(iso)
source("dispeRse.R")
plot(iso)
iso <- simulateDispersal(vt, orig, 5000, 1.3)
plot(iso)
iso <- simulateDispersal(vt, orig, 5000, 1.78)
plot(iso)
vt <- raster("~/veg_test.tif")
vt[values(vt) > 1] <- 20
iso <- simulateDispersal(vt, orig, 5000, 1.78)
plot(iso)
plot(iso, col=viridis(5))
plot(iso, col=viridis(25))
plot(iso, col=viridis(20))
vt[values(vt) > 1] <- 5
iso <- simulateDispersal(vt, orig, 5000, 1.78)
plot(iso, col=viridis(20))
plot(iso, col=viridis(30))
plot(iso, col=viridis(10))
vt[values(vt) > 1] <- 33
iso <- simulateDispersal(vt, orig, 5000, 1.78)
plot(iso, col=viridis(10))
setwd("~/expand_tupi/")
source("utils.R")
tm <- testModels()
tm
tmo <- tm[order(tm$score),]
tmo
